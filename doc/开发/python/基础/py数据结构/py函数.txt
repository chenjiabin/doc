函数的基本概念：
1、函数的主要作用是为了实现代码的最大程度地重复使用
2、函数用于将相关功能打包并参数化


函数的分类：
全局函数：定义在模块中，对整个代码文件有限
局部函数：嵌套域其他函数中，对其嵌套的那个函数有效
lambda函数：表达式
内置函数：对整个解释器有效


函数的设计规范：
1、通过参数接受输入，通过return产生输出，保证函数的独立性
2、尽量减少使用全局变量进行函数间通行
3、不要在函数中修改可变类型的参数
4、每个函数都应该有一个单一的目标
5、每个函数的功能都应该相对简单


函数的定义：

def   function_name():
	执行语句
	.........

return：用于返回函数值，如果没有return语句则返回None

函数的作用域：
1、函数中的变量都是局部变量，只在函数内生效
2、当局部变量和全局变量名发生冲突时，局部变量生效
3、在变量名没有冲突的情况下，在函数内可以调用全局变量
4、在函数内默认不允许对全局变量进行修改，如果一定要修改需要使用global再函数内声明全局变量
5、如果在函数中更改全局的可变数值类型的值，那么将会改变这个数值的值

变量名解析遵循LEGB规则：
L：本地变量
E：函数内部变量
G：全局变量
B：内置变量


函数参数的传递：
    参数类型：
      1、位置参数：传递参数时，传递的参数和定义的参数之间一一对应
      2、关键字参数：使用关键字进行传递参数
      3、默认参数：给参数一个默认值，在没有给默认参数传递值时，默认产生的值等于事先给他定义好的值
      4、可变参数：在没有确定传递过来的参数个数时通常使用可变参数
      5、可变参数解包：通常将一个列表的元素分解成其元素对应的变量


lambda：匿名函数

lambda语句定义的是合法的表达式，不能出现条件判断语句和非表达式语句，如for和while等
lambda主要用于指定短小的回调函数
lambda将返回一个函数而不会将他赋值给某个变量，所以一般需要自己赋值
lambda是一个表达式，而不是一个代码块
lambda支持默认参数

lambda的使用格式：
In [13]: fa = lambda x,y: x + y
In [14]: fa(1,2)
Out[14]: 3

默认参数：
In [30]: fa = (lambda x=10,y=20:x + y)
In [31]: fa()
Out[31]: 30
In [32]: fa(2,3)
Out[32]: 5

yield语句：
在函数中使用yield语句，会返回一个生成器对象


装饰器：是函数的闭合的高级应用
1、装饰器本身也是一个函数，用于装饰其他函数
2、功能：增强其他被装饰的函数的功能
3、装饰器一般接受一个函数作为参数，以对其进行增强


def f1(x):				//定义装饰器，接受一个函数x作为一个参数
    print 'aa'				//定义装饰器类容
    print x()				//调用被装饰的函数
    print 'bb'				//定义装饰器类容

					
@f1					//调用装饰器
def f2():				//定义被装饰的函数
    return 'cc'				//定义被装饰函数的类容
aa														
cc					//输出结果
bb
 





