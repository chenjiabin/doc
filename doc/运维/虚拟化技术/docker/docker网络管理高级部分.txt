docker高级网络配置：
	当Docker启动时，会自动在主机上创建一个docker0虚拟网桥，实际上是Linux的一个bridge，它会在挂载到它的网口之间进行转发。
	同时，Docker 随机分配一个本地未占用的私有网段中的一个地址给docker0接口。
	此后启动的容器内的网口也会自动分配一个同一网段的地址。
	当创建一个Docker容器的时候，同时会创建了一对 veth pair接口(当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包)。
	这对接口一端在容器内，即eth0，另一端在本地并被挂载到docker0网桥，名称以veth开头。
	通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker就创建了在主机和所有容器之间一个虚拟共享网络。


DNS配置：
	--hostname=HOSTNAME  				#设定容器的主机名，它会被写到容器内的/etc/hostname和/etc/hosts
	--dns=IP_ADDRESS  					#添加DNS服务器到容器的/etc/resolv.conf中
	--link=CONTAINER_NAME:ALIAS			#添加一个其他容器的主机名到/etc/hosts文件中，让新容器的进程可以使用主机名ALIAS访问

		docker run -it --hostname=h1 --dns=8.8.8.8 ubuntu /bin/bash			#示例


容器访问控制：
	容器的访问控制，主要通过Linux上的iptables防火墙来进行管理和实现。

	vim /etc/sysctl.conf					#修改配置文件
		net.ipv4.ip_forward=1				#开发路由转发(永久生效，重启生效)

	sysctl -w net.ipv4.ip_forward=1			#开发路由转发(临时有效，立即生效)

	默认情况下，容器可以主动访问到外部网络的连接，但是外部网络无法访问到容器。
	容器所有到外部网络的连接，源地址都会被NAT成本地系统的IP地址。这是使用iptables的源地址伪装操作实现的。
	如果想要外部主机访问内部容器则需要使用端口映射。


配置docker0网桥：
	Docker服务默认会创建一个docker0网桥，它在内核层连通了其他的物理或虚拟网卡，将所有容器和本地主机都放到同一个物理网络。
	Docker默认指定了docker0接口的IP地址和子网掩码，让主机和容器之间可以通过网桥相互通信，
	docker0给出了MTU(接口允许接收的最大传输单元)，通常是 1500 Bytes，或宿主主机网络路由上支持的默认值。
	创建容器时，Docker从docker0所在网段中获取一个空闲的ip地址分配给容器，本地主机上docker0接口的IP作为所有容器的默认网关。

	docker0是Linux网桥，可以使用brctl show来查看网桥和端口连接信息

	apt-get install bridge-utils					#安装brctl命令
	brctl show						#查看接口信息


	Docker 1.2.0开始支持在运行中的容器里编辑/etc/hosts、/etc/hostname和/etc/resolve.conf文件。
	但是这些修改是临时的，只在运行的容器中保留，容器终止或重启后并不会被保存下来。也不会被docker commit提交。
