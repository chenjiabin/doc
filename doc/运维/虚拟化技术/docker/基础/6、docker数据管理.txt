容器中的数据管理主要有两种方式：
    数据卷
    数据卷容器


数据卷：
    数据卷是一个可供容器使用的特殊目录，它绕过文件系统，提供了很多有用的特性：
        数据卷的使用，类似于Linux下的mount操作
        数据卷可以在容器之间共享和重用
        对数据卷的修改会立即生效
        对数据卷的更新，不会影响镜像
        卷会一直存在，直到没有容器使用

数据卷管理：
    docker run -d --name data -v /local_data/:/docker_data/ centos  #-v指定数据卷映射关系，--name指定NAMES

    docker挂载数据卷的默认权限是"读写(rw)"，用户也可以根据自己的需求进行指定
    docker run -d --name data2 -v /data/:/data1/:ro centos       #ro代表只读




数据卷容器：
    如果用户需要在容器之间共享一些持续更新的数据，最简单的方式是使用数据卷容器
    数据卷容器就是一种普通容器，专门提供数据卷供其它容器挂载使用


数据卷容器管理：
    创建数据卷容器：
        docker run -d -v /data_db:/data --name data_db centos

        其他容器可以使用--volumes--from来挂载data_db中的数据卷：
            docker run -i --volumes-from data_db --name db2 centos /bin/touch /data/{1..9}.txt
            ls /data_db             #查看文件是否存在

        注意：使用--volumes--from所挂载数据卷的容器本身并不一定需要保存运行状态

        如果删除了挂载的容器，数据卷并不会被自动删除
        如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用docker rm -v 命令来指定同时删除关联的容器
        使用数据卷容器可以让用户在容器之间自由的升级和移动数据卷


    备份恢复：
        可以使用数据卷容器对其中的数据卷容器进行备份、恢复、以实现数据的迁移
        数据卷容器备份
        	docker run --volumes-from data_db -v $(pwd):/backup centos tar cvf /backup/backup.tar /data
          #在当前目录下备份数据卷容器

        	dbdata：数据卷容器	 $(pwd):/backup：获取当前目录位置并赋值给/backup
          /backup/backup.tar：在当前目录下创建backup.tar     /testdata：数据在容器中的位置

        	docker run --volumes-from data_db -v /mnt:/mnt centos tar cvf /mnt/backup.tar /data
          #备份在指定目录中


        数据卷容器恢复
        	如果要恢复数据到一个容器，首先创建一个带有数据卷的容器 dbdata2
        	docker run -d -v /data_db2:/data --name dbdata2 centos

        	然后创建另一个容器，挂载 dbdata2 的容器，并使用  untar  解压备份文件到挂载的容器卷中
        	docker run --volumes-from dbdata2 -v $(pwd):/backup --name test centos tar zcf /backup/backup.tar.gz /data
